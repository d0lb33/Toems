@page "/Modules/Command"

@inject NavigationManager navigationManager
@inject ToemsApiService apiService
@inject DialogService dialogService
@using System.Linq

<ToemsAlertMessage Message="@message" MessageType="@messageType"></ToemsAlertMessage>

<ArchiveOrDelete Resource="Command Module" OnDialogAction="OnDialogAction" />
<br class="clear" />
<FilterLimit OnChange="OnFilterChange" />
<br class="clear" />
<RadzenTextBox Placeholder="Search"/>
<RadzenGrid SelectionMode="DataGridSelectionMode.Multiple" @bind-Value=@selectedValues Row
            AllowSorting="true" Data="@modules" TItem="EntityCommandModule"  FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
    <Columns>
        <RadzenGridColumn TItem="EntityCommandModule" Width="50px" Sortable="false">
            <HeaderTemplate>
                <RadzenCheckBox TriState="false" TValue="bool"
                                Change="@(args => selectedValues = args ? modules : null)" />
            </HeaderTemplate>
            <Template Context="module">
                <RadzenCheckBox TriState="false" Value="@(selectedValues != null && (selectedValues as IEnumerable<EntityCommandModule>).Contains(module))" />
            </Template>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="EntityCommandModule" Width="150px" Sortable="false">
            <Template Context="module">
                <RadzenButton ButtonStyle="Radzen.ButtonStyle.Light" Text="View"
                              Click='() => navigationManager.NavigateTo($"/Modules/Command/Details/{module.Id}")'
                              class="btn-block" />
            </Template>

        </RadzenGridColumn>
        <RadzenGridColumn TItem="EntityCommandModule" Property="Name" Title="Name" Width="200px" />
        <RadzenGridColumn TItem="EntityCommandModule" Property="Command" Title="Command" />

    </Columns>
</RadzenGrid>



@code {
    IEnumerable<EntityCommandModule> modules;
    object selectedValues;

    private string message;
    private AlertMessageType messageType = AlertMessageType.Success;

    private async Task OnDialogAction(ArchiveDeleteDialogDto dialogResult)
    {
        if (dialogResult.IsYes)
        {
            var selected = (selectedValues as IEnumerable<EntityCommandModule>).Cast<EntityCommandModule>().ToList();
            if (dialogResult.ActionType == ActionType.Archive)
                await apiService.CommandModuleService.Get();
            else if (dialogResult.ActionType == ActionType.Delete)
            {
                foreach (var module in selected)
                {
                    var res = await apiService.CommandModuleService.Delete(module.Id);
                    if (res.Success)
                    {
                        message = "Successfully deleted the selected modules.";
                    }
                    else
                    {
                        message = "Could not delete the selected modules";
                        messageType = AlertMessageType.Error;
                    }
                }
            }
            modules = await apiService.CommandModuleService.Get();
        }
    }

    private async Task OnFilterChange(string limit)
    {

    }

    protected override async Task OnInitializedAsync()
    {
        modules = await apiService.CommandModuleService.Get();
    }

}
