@page "/Modules/Command"

@inject NavigationManager navigationManager
@inject ToemsApiService apiService

<ArchiveOrDelete Resource="Command Module" SelectedItems="@selectedModules" OnDialogAction="OnDialogAction" />

<ToemsAlertMessage Message="@_message" OnMessageClosed="@(args => _message = string.Empty)" />

<FilterGrid OnFilterUpdate="OnFilterUpdate" />

<RadzenGrid SelectionMode="DataGridSelectionMode.Multiple" @bind-Value=@selectedModules
            AllowSorting="true" Data="@modules" TItem="EntityCommandModule" RowSelect="StateHasChanged">
    <Columns>
        <RadzenGridColumn TItem="EntityCommandModule" Width="50px" Sortable="false">
            <HeaderTemplate>
                <RadzenCheckBox TriState="false" TValue="bool"
                                Change="@(args => selectedModules = args ? modules : null)" />
            </HeaderTemplate>
            <Template Context="module">
                <RadzenCheckBox TriState="false" Value="@(selectedModules != null && (selectedModules as IEnumerable<EntityCommandModule>).Contains(module))" />
            </Template>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="EntityCommandModule" Width="150px" Sortable="false">
            <Template Context="module">
                <RadzenButton ButtonStyle="Radzen.ButtonStyle.Light" Text="View"
                              Click='() => navigationManager.NavigateTo($"/Modules/Command/Details/{module.Id}")'
                              class="btn-block" />
            </Template>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="EntityCommandModule" Property="Name" Title="Name" Width="200px" />
        <RadzenGridColumn TItem="EntityCommandModule" Property="Command" Title="Command" />
    </Columns>
</RadzenGrid>



@code {
    IEnumerable<EntityCommandModule> modules;
    object selectedModules;

    DtoSearchFilterCategories Filter = new DtoSearchFilterCategories();

    private string _message;

    private async Task OnDialogAction(string message)
    {
        _message = message;
        await BindGrid();
    }

    public async Task OnFilterUpdate(DtoSearchFilterCategories filter)
    {
        Filter = filter;
        await BindGrid();
    }

    protected override async Task OnInitializedAsync()
    {
        await BindGrid();
    }

    private async Task BindGrid()
    {
        modules = await apiService.CommandModuleService.Search(Filter);
    }

}
