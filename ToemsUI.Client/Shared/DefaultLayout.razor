@using Microsoft.AspNetCore.Components
@using Radzen.Blazor
@inherits LayoutComponentBase
@inject ThemeState ThemeState
@inject NavigationManager UriHelper
@inject IJSRuntime JSRuntime
@inject UserState state


@if (Theme != "default.css")
{
    <link href="_content/Radzen.Blazor/css/@(Theme)" rel="stylesheet" />
}
<RadzenDialog />
<RadzenHeader>
    <ChildContent>
        <div class="row justify-content-start align-items-center">
            <div class="col-6 d-flex align-items-center">
                <RadzenSidebarToggle Click="@(args => { sidebarExpanded = !sidebarExpanded; bodyExpanded = !bodyExpanded; })">
                </RadzenSidebarToggle>

                <img src="img/logowhite-small.png" />
            </div>
            <div class="col-6 d-flex align-items-center justify-content-end">
                <div class="d-none d-md-inline-flex align-items-center">
                    <UserStatus />
                </div>
                <label class="d-none d-sm-inline-block" style="margin-left: 1rem">Theme:</label>
                <RadzenDropDown style="margin:0 .5rem" TValue="string" TextProperty="Text" ValueProperty="Value" Data="@themes" Value="@ThemeState.CurrentTheme" Change="@ChangeTheme" />
            </div>
        </div>
    </ChildContent>
</RadzenHeader>
<div style="width:100%">
    <RadzenBody @ref="@body0" @bind-Expanded="@bodyExpanded" class="main-content" >
        <ChildContent>
            <RadzenContentContainer Name="main">
                @Body
            </RadzenContentContainer>
        </ChildContent>
    </RadzenBody>
</div>
<RadzenSidebar @ref="@sidebar0" @bind-Expanded="@sidebarExpanded">
    <ChildContent>
        <DefaultNav/>
    </ChildContent>
</RadzenSidebar>

@code {

    RadzenSidebar sidebar0;
    RadzenBody body0;
    bool sidebarExpanded = true;
    bool bodyExpanded = false;


    dynamic themes = new[]
{
        new { Text = "Default", Value = "default"},
        new { Text = "Dark", Value="dark" },
        new { Text = "Software", Value = "software"},
        new { Text = "Humanistic", Value = "humanistic" }
    };

    string Theme
    {
        get
        {
            return $"{ThemeState.CurrentTheme}.css";
        }
    }

    void ChangeTheme(object value)
    {
        ThemeState.CurrentTheme = value.ToString();
        var a = UriHelper.ToAbsoluteUri(UriHelper.Uri).ToString();
        UriHelper.NavigateTo(UriHelper.ToAbsoluteUri(UriHelper.Uri).ToString());
    }

    protected override async Task OnInitializedAsync()
    {
        await state.SetAccessToken();
    }

  
}
